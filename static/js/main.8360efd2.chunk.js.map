{"version":3,"sources":["Header.js","SearchBar.js","Popup.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["header","react_default","a","createElement","style","backgroundColor","height","color","textAlign","padding","SearchBar","state","text","onChange","e","_this","setState","target","value","onSubmit","preventDefault","props","submitHandler","className","this","type","placeholder","Component","Popup","onClick","closePopup","items","restaurants","map","item","id","name","address","city","phone","Results","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isLoaded","showPopup","popupId","console","log","search","_this2","key","togglePopup","src","image_url","width","alt","src_Popup","_this3","fetch","then","res","json","App","clickedHandler","data","results","current","updateSearch","React","createRef","Header","src_SearchBar","src_Results","ref","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8360efd2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction header() {\r\n\r\n    const style = {\r\n        backgroundColor: '#232b2b',\r\n        height: '6em',\r\n        color: 'white',\r\n        textAlign: 'center',\r\n        padding: '10px'\r\n    }\r\n\r\n    return (\r\n        <div style={style}>\r\n            <h1 style={{padding: '5px'}}>Restaurants from OpenTable API</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default header;","import React, { Component } from \"react\";\r\nimport \"./CSS/SearchBar.css\";\r\n\r\nclass SearchBar extends Component {\r\n  state = {\r\n    text: \"\"\r\n  };\r\n\r\n  onChange = e =>\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.submitHandler(this.state.text);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"formDiv\">\r\n        <p>Search for Restaurants in your City</p>\r\n        <form onSubmit={this.onSubmit} className=\"form\">\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.text}\r\n            placeholder=\"Restaurant\"\r\n            onChange={this.onChange}\r\n            className=\"inputText\"\r\n          />\r\n          <br />\r\n          <input type=\"submit\" value=\"Search\" className=\"submitButton\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from \"react\";\r\nimport \"./CSS/Popup.css\";\r\n\r\nclass Popup extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"popup\" onClick={this.props.closePopup}>\r\n        <div className=\"popup_inner\">\r\n          {this.props.items.restaurants.map(item =>\r\n            item.id === this.props.id ? (\r\n              <div className=\"content\">\r\n                <p><b>Name:</b> {item.name}</p>\r\n                <p><b>Address:</b> {item.address}</p>\r\n                <p><b>City:</b> {item.city}</p>\r\n                <p><b>Phone:</b> {item.phone}</p>\r\n                <button onClick={this.props.closePopup}>Close</button>\r\n              </div>\r\n            ) : null\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Popup;\r\n","import React, { Component } from \"react\";\r\nimport \"./CSS/Results.css\";\r\nimport Popuping from \"./Popup\";\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded: false,\r\n      items: {},\r\n      showPopup: false,\r\n      popupId: \"\"\r\n    };\r\n  }\r\n\r\n  togglePopup(id) {\r\n    this.setState({\r\n      showPopup: !this.state.showPopup,\r\n      popupId: id\r\n    });\r\n    console.log(this.state.showPopup);\r\n  }\r\n\r\n  updateSearch() {\r\n    if(this.props.name !== ''){\r\n      this.search(this.props.name);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isLoaded) {\r\n      return <p style={{ textAlign: \"center\" }}>Search for Restaurants</p>;\r\n    } else {\r\n      return (\r\n        <div className=\"grid-container\">\r\n          {this.state.items.restaurants.map(item => (\r\n            <div\r\n              key={item.id}\r\n              className=\"polaroid\"\r\n              onClick={() => this.togglePopup(item.id)}\r\n            >\r\n            <img src={item.image_url} style={{ width: \"100%\" }} alt=\"Restaurant Pic\" />\r\n            <div className=\"container\">\r\n                <p>{item.name}</p>\r\n            </div>\r\n          </div>\r\n          ))};\r\n          {this.state.showPopup ? (\r\n            <Popuping\r\n              items={this.state.items}\r\n              id={this.state.popupId}\r\n              closePopup={() => this.togglePopup()}\r\n            />\r\n          ) : null}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  search(name) {\r\n    fetch(\"https://opentable.herokuapp.com/api/restaurants?city=\" + name)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        this.setState({\r\n          items: json,\r\n          isLoaded: true\r\n        });\r\n      });\r\n    }\r\n}\r\n\r\nexport default Results;\r\n","import React, { Component } from \"react\";\r\nimport Header from \"./Header\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport Results from \"./Results\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      restaurants: null\r\n    };\r\n    this.results = React.createRef();\r\n  }\r\n\r\n  clickedHandler = data => {\r\n    this.setState({\r\n      restaurants: data\r\n    });\r\n    this.results.current.updateSearch(data);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <SearchBar submitHandler={this.clickedHandler} />\r\n        <h2 style={{textAlign: 'center'}}>{this.state.restaurants}</h2>\r\n        <Results name={this.state.restaurants} ref={this.results} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './CSS/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}